name: Automatic Language Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.md'  # Only trigger on markdown file changes

jobs:
  lang-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full git history for diff comparison

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Run language check script
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
        id: check  # Add ID to reference this step
        run: |
          chmod +x ./lang-check/git-diff.sh
          output=$(./lang-check/git-diff.sh -t)
          echo "$output"  # Display check results
          
          # Save output to step outputs
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check if output contains ‚ùå symbol
          if echo "$output" | grep -q "‚ùå"; then
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1  # Non-zero exit code will fail the Action
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            exit 0  # Zero exit code indicates Action success
          fi

      - name: Comment PR
        if: always()  # Run even if previous step fails
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### Language Check Results üîç
            
            ${process.env.RESULT}
            
            Status: ${process.env.STATUS === 'passed' ? '‚úÖ Passed' : '‚ùå Failed'}
            
            *Automated message from Language Check Action*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          RESULT: ${{ steps.check.outputs.result }}
          STATUS: ${{ steps.check.outputs.status }}